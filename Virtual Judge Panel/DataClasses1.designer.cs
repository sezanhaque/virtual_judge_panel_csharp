#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Virtual_Judge_Panel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaccount_type(account_type instance);
    partial void Updateaccount_type(account_type instance);
    partial void Deleteaccount_type(account_type instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void InsertRating(Rating instance);
    partial void UpdateRating(Rating instance);
    partial void DeleteRating(Rating instance);
    partial void Insertevent(@event instance);
    partial void Updateevent(@event instance);
    partial void Deleteevent(@event instance);
    partial void InserteventCategory(eventCategory instance);
    partial void UpdateeventCategory(eventCategory instance);
    partial void DeleteeventCategory(eventCategory instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Virtual_Judge_Panel.Properties.Settings.Default.DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<account_type> account_types
		{
			get
			{
				return this.GetTable<account_type>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<Rating> Ratings
		{
			get
			{
				return this.GetTable<Rating>();
			}
		}
		
		public System.Data.Linq.Table<@event> events
		{
			get
			{
				return this.GetTable<@event>();
			}
		}
		
		public System.Data.Linq.Table<eventCategory> eventCategories
		{
			get
			{
				return this.GetTable<eventCategory>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.account_type")]
	public partial class account_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _types;
		
		private EntitySet<user> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OntypesChanging(string value);
    partial void OntypesChanged();
    #endregion
		
		public account_type()
		{
			this._users = new EntitySet<user>(new Action<user>(this.attach_users), new Action<user>(this.detach_users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_types", DbType="NVarChar(50)")]
		public string types
		{
			get
			{
				return this._types;
			}
			set
			{
				if ((this._types != value))
				{
					this.OntypesChanging(value);
					this.SendPropertyChanging();
					this._types = value;
					this.SendPropertyChanged("types");
					this.OntypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_type_user", Storage="_users", ThisKey="Id", OtherKey="account_type_id")]
		public EntitySet<user> users
		{
			get
			{
				return this._users;
			}
			set
			{
				this._users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.account_type = this;
		}
		
		private void detach_users(user entity)
		{
			this.SendPropertyChanging();
			entity.account_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _username;
		
		private string _password;
		
		private string _name;
		
		private string _email;
		
		private System.Nullable<int> _account_type_id;
		
		private string _img_path;
		
		private string _security_question;
		
		private System.Nullable<int> _projects_id;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<account_type> _account_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onaccount_type_idChanging(System.Nullable<int> value);
    partial void Onaccount_type_idChanged();
    partial void Onimg_pathChanging(string value);
    partial void Onimg_pathChanged();
    partial void Onsecurity_questionChanging(string value);
    partial void Onsecurity_questionChanged();
    partial void Onprojects_idChanging(System.Nullable<int> value);
    partial void Onprojects_idChanged();
    #endregion
		
		public user()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._account_type = default(EntityRef<account_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(MAX)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_account_type_id", DbType="Int")]
		public System.Nullable<int> account_type_id
		{
			get
			{
				return this._account_type_id;
			}
			set
			{
				if ((this._account_type_id != value))
				{
					if (this._account_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onaccount_type_idChanging(value);
					this.SendPropertyChanging();
					this._account_type_id = value;
					this.SendPropertyChanged("account_type_id");
					this.Onaccount_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_img_path", DbType="NVarChar(MAX)")]
		public string img_path
		{
			get
			{
				return this._img_path;
			}
			set
			{
				if ((this._img_path != value))
				{
					this.Onimg_pathChanging(value);
					this.SendPropertyChanging();
					this._img_path = value;
					this.SendPropertyChanged("img_path");
					this.Onimg_pathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_security_question", DbType="NVarChar(50)")]
		public string security_question
		{
			get
			{
				return this._security_question;
			}
			set
			{
				if ((this._security_question != value))
				{
					this.Onsecurity_questionChanging(value);
					this.SendPropertyChanging();
					this._security_question = value;
					this.SendPropertyChanged("security_question");
					this.Onsecurity_questionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projects_id", DbType="Int")]
		public System.Nullable<int> projects_id
		{
			get
			{
				return this._projects_id;
			}
			set
			{
				if ((this._projects_id != value))
				{
					this.Onprojects_idChanging(value);
					this.SendPropertyChanging();
					this._projects_id = value;
					this.SendPropertyChanged("projects_id");
					this.Onprojects_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_Project", Storage="_Projects", ThisKey="Id", OtherKey="studentId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_type_user", Storage="_account_type", ThisKey="account_type_id", OtherKey="Id", IsForeignKey=true)]
		public account_type account_type
		{
			get
			{
				return this._account_type.Entity;
			}
			set
			{
				account_type previousValue = this._account_type.Entity;
				if (((previousValue != value) 
							|| (this._account_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account_type.Entity = null;
						previousValue.users.Remove(this);
					}
					this._account_type.Entity = value;
					if ((value != null))
					{
						value.users.Add(this);
						this._account_type_id = value.Id;
					}
					else
					{
						this._account_type_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("account_type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rating")]
	public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _projectid;
		
		private System.Nullable<int> _rating1;
		
		private System.Nullable<int> _uid;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnprojectidChanging(System.Nullable<int> value);
    partial void OnprojectidChanged();
    partial void Onrating1Changing(System.Nullable<int> value);
    partial void Onrating1Changed();
    partial void OnuidChanging(System.Nullable<int> value);
    partial void OnuidChanged();
    #endregion
		
		public Rating()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_projectid", DbType="Int")]
		public System.Nullable<int> projectid
		{
			get
			{
				return this._projectid;
			}
			set
			{
				if ((this._projectid != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprojectidChanging(value);
					this.SendPropertyChanging();
					this._projectid = value;
					this.SendPropertyChanged("projectid");
					this.OnprojectidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="rating", Storage="_rating1", DbType="Int")]
		public System.Nullable<int> rating1
		{
			get
			{
				return this._rating1;
			}
			set
			{
				if ((this._rating1 != value))
				{
					this.Onrating1Changing(value);
					this.SendPropertyChanging();
					this._rating1 = value;
					this.SendPropertyChanged("rating1");
					this.Onrating1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uid", DbType="Int")]
		public System.Nullable<int> uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Rating", Storage="_Project", ThisKey="projectid", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._projectid = value.Id;
					}
					else
					{
						this._projectid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.event")]
	public partial class @event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _title;
		
		private System.Nullable<System.DateTime> _startdate;
		
		private System.Nullable<System.DateTime> _enddate;
		
		private EntitySet<eventCategory> _eventCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnstartdateChanging(System.Nullable<System.DateTime> value);
    partial void OnstartdateChanged();
    partial void OnenddateChanging(System.Nullable<System.DateTime> value);
    partial void OnenddateChanged();
    #endregion
		
		public @event()
		{
			this._eventCategories = new EntitySet<eventCategory>(new Action<eventCategory>(this.attach_eventCategories), new Action<eventCategory>(this.detach_eventCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(MAX)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> startdate
		{
			get
			{
				return this._startdate;
			}
			set
			{
				if ((this._startdate != value))
				{
					this.OnstartdateChanging(value);
					this.SendPropertyChanging();
					this._startdate = value;
					this.SendPropertyChanged("startdate");
					this.OnstartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enddate", DbType="DateTime")]
		public System.Nullable<System.DateTime> enddate
		{
			get
			{
				return this._enddate;
			}
			set
			{
				if ((this._enddate != value))
				{
					this.OnenddateChanging(value);
					this.SendPropertyChanging();
					this._enddate = value;
					this.SendPropertyChanged("enddate");
					this.OnenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="event_eventCategory", Storage="_eventCategories", ThisKey="Id", OtherKey="eventid")]
		public EntitySet<eventCategory> eventCategories
		{
			get
			{
				return this._eventCategories;
			}
			set
			{
				this._eventCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_eventCategories(eventCategory entity)
		{
			this.SendPropertyChanging();
			entity.@event = this;
		}
		
		private void detach_eventCategories(eventCategory entity)
		{
			this.SendPropertyChanging();
			entity.@event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.eventCategory")]
	public partial class eventCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _categoryname;
		
		private System.Nullable<int> _eventid;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<@event> _event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OncategorynameChanging(string value);
    partial void OncategorynameChanged();
    partial void OneventidChanging(System.Nullable<int> value);
    partial void OneventidChanged();
    #endregion
		
		public eventCategory()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._event = default(EntityRef<@event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryname", DbType="NVarChar(50)")]
		public string categoryname
		{
			get
			{
				return this._categoryname;
			}
			set
			{
				if ((this._categoryname != value))
				{
					this.OncategorynameChanging(value);
					this.SendPropertyChanging();
					this._categoryname = value;
					this.SendPropertyChanged("categoryname");
					this.OncategorynameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventid", DbType="Int")]
		public System.Nullable<int> eventid
		{
			get
			{
				return this._eventid;
			}
			set
			{
				if ((this._eventid != value))
				{
					if (this._event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventidChanging(value);
					this.SendPropertyChanging();
					this._eventid = value;
					this.SendPropertyChanged("eventid");
					this.OneventidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventCategory_Project", Storage="_Projects", ThisKey="Id", OtherKey="categoryId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="event_eventCategory", Storage="_event", ThisKey="eventid", OtherKey="Id", IsForeignKey=true)]
		public @event @event
		{
			get
			{
				return this._event.Entity;
			}
			set
			{
				@event previousValue = this._event.Entity;
				if (((previousValue != value) 
							|| (this._event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._event.Entity = null;
						previousValue.eventCategories.Remove(this);
					}
					this._event.Entity = value;
					if ((value != null))
					{
						value.eventCategories.Add(this);
						this._eventid = value.Id;
					}
					else
					{
						this._eventid = default(Nullable<int>);
					}
					this.SendPropertyChanged("@event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.eventCategory = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.eventCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _comment_text;
		
		private System.Nullable<int> _project_id;
		
		private System.Nullable<int> _uid;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Oncomment_textChanging(string value);
    partial void Oncomment_textChanged();
    partial void Onproject_idChanging(System.Nullable<int> value);
    partial void Onproject_idChanged();
    partial void OnuidChanging(System.Nullable<int> value);
    partial void OnuidChanged();
    #endregion
		
		public Comment()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment_text", DbType="NVarChar(MAX)")]
		public string comment_text
		{
			get
			{
				return this._comment_text;
			}
			set
			{
				if ((this._comment_text != value))
				{
					this.Oncomment_textChanging(value);
					this.SendPropertyChanging();
					this._comment_text = value;
					this.SendPropertyChanged("comment_text");
					this.Oncomment_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project_id", DbType="Int")]
		public System.Nullable<int> project_id
		{
			get
			{
				return this._project_id;
			}
			set
			{
				if ((this._project_id != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproject_idChanging(value);
					this.SendPropertyChanging();
					this._project_id = value;
					this.SendPropertyChanged("project_id");
					this.Onproject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uid", DbType="Int")]
		public System.Nullable<int> uid
		{
			get
			{
				return this._uid;
			}
			set
			{
				if ((this._uid != value))
				{
					this.OnuidChanging(value);
					this.SendPropertyChanging();
					this._uid = value;
					this.SendPropertyChanged("uid");
					this.OnuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Comment", Storage="_Project", ThisKey="project_id", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._project_id = value.Id;
					}
					else
					{
						this._project_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _title;
		
		private string _discription;
		
		private System.Nullable<int> _studentId;
		
		private System.Nullable<int> _categoryId;
		
		private System.Nullable<double> _avg_Rating;
		
		private System.Nullable<System.DateTime> _publishDate;
		
		private string _videolink;
		
		private string _filelink;
		
		private EntitySet<Rating> _Ratings;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<user> _user;
		
		private EntityRef<eventCategory> _eventCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndiscriptionChanging(string value);
    partial void OndiscriptionChanged();
    partial void OnstudentIdChanging(System.Nullable<int> value);
    partial void OnstudentIdChanged();
    partial void OncategoryIdChanging(System.Nullable<int> value);
    partial void OncategoryIdChanged();
    partial void Onavg_RatingChanging(System.Nullable<double> value);
    partial void Onavg_RatingChanged();
    partial void OnpublishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnpublishDateChanged();
    partial void OnvideolinkChanging(string value);
    partial void OnvideolinkChanged();
    partial void OnfilelinkChanging(string value);
    partial void OnfilelinkChanged();
    #endregion
		
		public Project()
		{
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._user = default(EntityRef<user>);
			this._eventCategory = default(EntityRef<eventCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(MAX)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discription", DbType="NVarChar(MAX)")]
		public string discription
		{
			get
			{
				return this._discription;
			}
			set
			{
				if ((this._discription != value))
				{
					this.OndiscriptionChanging(value);
					this.SendPropertyChanging();
					this._discription = value;
					this.SendPropertyChanged("discription");
					this.OndiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentId", DbType="Int")]
		public System.Nullable<int> studentId
		{
			get
			{
				return this._studentId;
			}
			set
			{
				if ((this._studentId != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentIdChanging(value);
					this.SendPropertyChanging();
					this._studentId = value;
					this.SendPropertyChanged("studentId");
					this.OnstudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryId", DbType="Int")]
		public System.Nullable<int> categoryId
		{
			get
			{
				return this._categoryId;
			}
			set
			{
				if ((this._categoryId != value))
				{
					if (this._eventCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIdChanging(value);
					this.SendPropertyChanging();
					this._categoryId = value;
					this.SendPropertyChanged("categoryId");
					this.OncategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avg_Rating", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> avg_Rating
		{
			get
			{
				return this._avg_Rating;
			}
			set
			{
				if ((this._avg_Rating != value))
				{
					this.Onavg_RatingChanging(value);
					this.SendPropertyChanging();
					this._avg_Rating = value;
					this.SendPropertyChanged("avg_Rating");
					this.Onavg_RatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> publishDate
		{
			get
			{
				return this._publishDate;
			}
			set
			{
				if ((this._publishDate != value))
				{
					this.OnpublishDateChanging(value);
					this.SendPropertyChanging();
					this._publishDate = value;
					this.SendPropertyChanged("publishDate");
					this.OnpublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_videolink", DbType="NVarChar(50)")]
		public string videolink
		{
			get
			{
				return this._videolink;
			}
			set
			{
				if ((this._videolink != value))
				{
					this.OnvideolinkChanging(value);
					this.SendPropertyChanging();
					this._videolink = value;
					this.SendPropertyChanged("videolink");
					this.OnvideolinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filelink", DbType="NVarChar(MAX)")]
		public string filelink
		{
			get
			{
				return this._filelink;
			}
			set
			{
				if ((this._filelink != value))
				{
					this.OnfilelinkChanging(value);
					this.SendPropertyChanging();
					this._filelink = value;
					this.SendPropertyChanged("filelink");
					this.OnfilelinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Rating", Storage="_Ratings", ThisKey="Id", OtherKey="projectid")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Comment", Storage="_Comments", ThisKey="Id", OtherKey="project_id")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_Project", Storage="_user", ThisKey="studentId", OtherKey="Id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._studentId = value.Id;
					}
					else
					{
						this._studentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="eventCategory_Project", Storage="_eventCategory", ThisKey="categoryId", OtherKey="Id", IsForeignKey=true)]
		public eventCategory eventCategory
		{
			get
			{
				return this._eventCategory.Entity;
			}
			set
			{
				eventCategory previousValue = this._eventCategory.Entity;
				if (((previousValue != value) 
							|| (this._eventCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._eventCategory.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._eventCategory.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._categoryId = value.Id;
					}
					else
					{
						this._categoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("eventCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
}
#pragma warning restore 1591
